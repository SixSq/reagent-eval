(ns sixsq.slipstream.webui.history
  (:require
    [re-frame.core :refer [dispatch dispatch-sync]]
    [sixsq.slipstream.webui.utils :as utils]

    [secretary.core :as secretary :refer-macros [defroute]]
    [goog.events :as events]
    [clojure.string :as str])
  (:import
    [goog History]
    [goog.history Html5History EventType]
    [goog.history.Html5History TokenTransformer]))

;;
;; set the application prefix
;;
;; Set the application prefix with:
;;
;; {:compiler-options {:closure-defines {'sixsq.slipstream.webui/PREFIX ""}}
;;
;; For production you probably want to use the default prefix of "webui",
;; but you can set this to another value if it is hosted elsewhere on the
;; webserver.
;;
(goog-define PREFIX "/webui")

;;
;; utilities for transforming between panel names and keywords
;;

(defn name->panel
  "Transforms the given panel name into the correponding namespaced
   panel keyword.  For example, 'apps' returns :panel/apps."
  [n]
  (when-not (str/blank? n)
    (keyword "panel" n)))

(defn panel->token
  "Transforms a panel keyword into the associated URL token.  For example, the
   keywork :panel/apps would be transformed to '/apps'."
  [panel]
  (when panel
    (str "/" (name panel))))

;;
;; initialize the history object
;;

(def ^:const default-token "/offers")
(defn get-token
  "Creates the history token from the given location."
  [location]
  (if-let [path (.-pathname location)]
    (if (= "/" path)
      default-token
      (str path (.-search location)))
    default-token))

(defn create-transformer
  "Saves and restores the URL based on the token provided to the
   Html5History object.  The methods of this object are needed
   when not using fragment based routing. The tokens are simply
   the remaining parts of the URL after the path prefix."
  []
  (let [transformer (TokenTransformer.)]
    (set! (.. transformer -retrieveToken)
          (fn [path-prefix location]
            (get-token location)))
    (set! (.. transformer -createUrl)
          (fn [token path-prefix location]
            (str path-prefix token)))
    transformer))

(def history
  (doto (Html5History. js/window (create-transformer))
    (events/listen EventType.NAVIGATE #(secretary/dispatch! (.-token %)))
    (.setPathPrefix (utils/host-url PREFIX))
    (.setUseFragment false)
    (.setEnabled true)))

;;
;; setup the client-side routing for URLs
;;

(defroute "/:panel-name" [panel-name]
          (.log js/console "requested panel: " panel-name)
          (dispatch [:set-panel (name->panel panel-name)]))

;;
;; method to be used for internal navigation between named resources
;;

(defn start
  "Sets the starting point for the history. Will dispatch an event that
   will reset to the correct panels as necessary."
  []
  (let [token (get-token (.-location js/window))]
    (.log js/console "start token: " token)
    (.setToken history (get-token (.-location js/window)))))

(defn navigate
  "Navigates to the panel (specified as a namespaced keyword) by pushing the
   corresponding token onto the HTML5 history object. Actual rerendering will
   be triggered by the event generated by the history object itself."
  [panel]
  (.setToken history (panel->token panel)))
